/************************************************************************************

 This experiment demostrates the application of a simple line follower robot. The
 robot follows a white line over a black backround

 Connection Details:  	L-1 PA0		L-2 PA1
   						R-1 PA2		R-2	PA3
   						PWML OC5A	PWMR OC5B
*************************************************************************************/
/********************************************************************************
 Author:
        Abhishek Kabra
        Kapil Dubey
        Kanwal Prakash Singh
        Saurabh Bhola

		Group 9
		2012 Batch
		CS308 course project


 Date: 18th April 2012

  Application example: Adaptive Cruise Control (ACC)

 Concepts covered:  ADC, LCD interfacing,zigbee, motion control based on sensor data

 LCD Connections:
 			  LCD	  Microcontroller Pins
 			  RS  --> PC0
			  RW  --> PC1
			  EN  --> PC2
			  DB7 --> PC7
			  DB6 --> PC6
			  DB5 --> PC5
			  DB4 --> PC4

 ADC Connection:
 			  ACD CH.	PORT	Sensor
			  0			PF0		Battery Voltage
			  1			PF1		White line sensor 3
			  2			PF2		White line sensor 2
			  3			PF3		White line sensor 1
			  4			PF4		IR Proximity analog sensor 1*****
			  5			PF5		IR Proximity analog sensor 2*****
			  6			PF6		IR Proximity analog sensor 3*****
			  7			PF7		IR Proximity analog sensor 4*****
			  8			PK0		IR Proximity analog sensor 5
			  9			PK1		Sharp IR range sensor 1
			  10		PK2		Sharp IR range sensor 2
			  11		PK3		Sharp IR range sensor 3
			  12		PK4		Sharp IR range sensor 4
			  13		PK5		Sharp IR range sensor 5
			  14		PK6		Servo Pod 1
			  15		PK7		Servo Pod 2

 ***** For using Analog IR proximity (1, 2, 3 and 4) sensors short the jumper J2.
 	   To use JTAG via expansion slot of the microcontroller socket remove these jumpers.

 Motion control Connection:
 			L-1---->PA0;		L-2---->PA1;
   			R-1---->PA2;		R-2---->PA3;
   			PL3 (OC5A) ----> PWM left; 	PL4 (OC5B) ----> PWM right;

 LCD Display interpretation:
 ****************************************************************************
 *LEFT WL SENSOR	CENTER WL SENSOR	RIGHT WL SENSOR		BLANK			*
 *BLANK				BLANK				BLANK				BLANK			*
 ****************************************************************************

 Note:

 1. Make sure that in the configuration options following settings are
 	done for proper operation of the code

 	Microcontroller: atmega2560
 	Frequency: 11059200
 	Optimization: -O0 (For more information read section: Selecting proper optimization options
						below figure 4.22 in the hardware manual)

 2. Make sure that you copy the lcd.c file in your folder

 3. Distance calculation is for Sharp GP2D12 (10cm-80cm) IR Range sensor

*********************************************************************************/

/*********************************************************************************/

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#include <math.h> //included to support power function
#include "lcd.c"//included to support lcd prints

#define FCPU 14745600ul //defined here to make sure that program works properly

void port_init();
void timer5_init();
void velocity(unsigned char, unsigned char);
void motors_delay();

unsigned char safe=0;
unsigned char tc=1;
unsigned char ADC_Conversion(unsigned char);
unsigned char ADC_Value;
unsigned char flag = 0;
unsigned int time_required=1000;
unsigned char flag1 = 0;
unsigned char flag2 = 0;
//variables used importantly in the program
unsigned char Left_white_line = 0;
unsigned char Center_white_line = 0;
unsigned char Right_white_line = 0;
unsigned char Front_Sharp_Sensor=0;
unsigned char Front_IR_Sensor=0;
unsigned char Left_Sharp_Sensor=0;
unsigned char Right_Sharp_Sensor=0;
unsigned char Left_IR_Sensor=0;
unsigned char Right_IR_Sensor=0;

unsigned char data;
unsigned char tx_data;
unsigned long int ShaftCountLeft = 0; //to keep track of left position encoder
unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
unsigned int Degrees; //to accept angle in degrees for turning
//unsigned char output_enable=PORTC & 0x80;
//unsigned char start_conv = PORTC & 0x40;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
}
int turn=-1;

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;
 PORTF = 0x00;
 DDRK = 0x00;
 PORTK = 0x00;
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;
 PORTA = PORTA & 0xF0;
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
}

//Function to initialize Buzzer
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
}

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
	adc_pin_config();
	motion_pin_config();
	buzzer_pin_config();
}

// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/

	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}
//function to switch on the buzzer
void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 port_restore = port_restore | 0x08;
 PORTC = port_restore;
}
//function to switch off the buzzer
void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
 port_restore = port_restore & 0xF7;
 PORTC = port_restore;
}


void adc_init()
{
	ADCSRA = 0x00;
	ADCSRB = 0x00;		//MUX5 = 0
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
	ACSR = 0x80;
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
}

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
	{
		ADCSRB = 0x08;
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20| Ch;
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
	a=ADCH;
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
	ADCSRB = 0x00;
	return a;
}

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{

	ADC_Value = ADC_Conversion(channel);
	lcd_print(row, coloumn, ADC_Value, 3);
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
}

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
}
//function to set the direction of motor in forward and start the motor
void forward (void)
{
  motion_set (0x06);//0110
}
//function to stop the motor
void stop (void)
{
  motion_set (0x00);
}
//function to move the  bot in left direction
void move_left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x04);
}
//function to move the  bot in right direction
void move_right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x02);
}
void left(void)
{
    PORTA = 0x05;
}
void right(void)
{
    PORTA = 0x0A;
}
void soft_left(void)
{
    PORTA = 0x02;
}
void soft_right(void)
{
    PORTA = 0x04;
}

void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
}

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
}

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 sei();   // Enables the global interrupt
}

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 sei();   // Enables the global interrupt
}


//ISR for right position encoder
ISR(INT5_vect)
{
 ShaftCountRight++;  //increment right shaft position count
}


//ISR for left position encoder
ISR(INT4_vect)
{
 ShaftCountLeft++;  //increment left shaft position count
}

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
 float ReqdShaftCount = 0;
 unsigned long int ReqdShaftCountInt = 0;

 ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
 ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
 ShaftCountRight = 0;
 ShaftCountLeft = 0;

 while (1)
 {
  if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
  break;
 }
 stop(); //Stop robot
}

void left_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
 angle_rotate(Degrees);
}

void right_degrees(unsigned int Degrees)
{
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
 angle_rotate(Degrees);
}

void soft_left_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
 Degrees=Degrees*2;
 angle_rotate(Degrees);
}

void soft_right_degrees(unsigned int Degrees)
{
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
 Degrees=Degrees*2;
 angle_rotate(Degrees);
}


//Function To Initialize UART0
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
 UCSR0A = 0x00;
 UCSR0C = 0x06;
 //UBRR0L = 0x47; //11059200 Hz
 UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
 UBRR0H = 0x00; //set baud rate hi
 //UCSR0B = 0x98; //for reciever
 UCSR0B = 0x18; //for transmiter

}


//SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
ISR(USART0_RX_vect)
{
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable

	UDR0 = data; 				//echo data back to PC

		if(data == 0x38) //ASCII value of 8
		{
	//		buzzer_on();
		}

}

// ISR for Data Register empty interrupt
ISR(USART0_UDRE_vect)
{
	UDR0 = tx_data; 				//data that need to be transmitted is transferred to UDRn
   // lcd_string("n");
 //   buzzer_on();
}

// ISR for Transmit complete interrupt.
ISR(USART0_TX_vect)
{
    //lcd_string(" T");
    //buzzer_on();
    //_delay_ms(1000);
    tc=1;
    //buzzer_off();


}
//intialize all the ports of lcd, zigbee et cetera
void init_devices (void)
{
 	cli(); //Clears the global interrupts
	port_init();
	adc_init();
	uart0_init();
	timer5_init();
	sei();   //Enables the global interrupts
}

void clear_led(void){
    lcd_cursor(2,1);
    lcd_string("          ");
}


//Main Function
int main()
{
	init_devices();
	motion_pin_config();
	left_encoder_pin_config();
    right_encoder_pin_config();
    lcd_set_4bit();
	lcd_init();
  /*  while(1){

        if(safe!=1){
            safe=1;
            lcd_string("ns ");
            tx_data=0x38;
            UCSR0B |= 0x78;
        }
        else{
            safe = 0;
            tx_data = 0x32;
            UCSR0B |= 0x78;
        }
        UCSR0B &= 0x18;
        _delay_ms(1000);

    }
    */
//Sender Bot Routine
	while(1){
        velocity(110,115);
        //velocity(108,125);
        forward();
        buzzer_off();
		Front_Sharp_Sensor = ADC_Conversion(11);
		Right_Sharp_Sensor = ADC_Conversion(12);
		print_sensor(1,5,11); // Center_Sharp_Sensor
        print_sensor(1,10,12); // Right_Sharp_Sensor
        safe = 0;
        if(Front_Sharp_Sensor > 90 || Right_Sharp_Sensor >85){
            lcd_cursor(2,4);
            lcd_string("Obstacle");
            stop();
            _delay_ms(500);
            buzzer_on();
            continue;
        }
		if(Front_Sharp_Sensor > 30 && Right_Sharp_Sensor < 20){
            lcd_cursor(2,4);
            lcd_string("L-Danger");
            safe = 0;
            //Send Signal of Long Range Danger through Xbee
		}
        else if(Front_Sharp_Sensor > 30 && Right_Sharp_Sensor > 20){
            lcd_cursor(2,4);
            lcd_string("S-Danger");
            safe = 0;
            //Send Signal of Short Range Danger through Xbee

        }
        else if(Front_Sharp_Sensor < 30 && Right_Sharp_Sensor > 20 && Right_Sharp_Sensor < 40){
            lcd_cursor(2,4);
            lcd_string("NextLane");
            safe=0;
            //Ignores to send signal of objects in next next lane
        }
        else if(Front_Sharp_Sensor < 30 && Right_Sharp_Sensor > 40){
            lcd_cursor(2,4);
            lcd_string("Adjacent");
            safe = 0;
            //Send Signal of Vehicle Beside through Xbee
        }
        else if(Front_Sharp_Sensor < 30 && Right_Sharp_Sensor < 20){
            lcd_cursor(2,4);
            lcd_string("SafeRoad");
            safe = 1;
        }
        UCSR0B &= 0x18;
 //       _delay_ms(500);

        if(safe==0){
            tx_data = 0x38;
            UCSR0B |= 0x78;
       //     lcd_print(1,1,tx_data,4);
            //_delay_ms(100);
            UCSR0B &= 0x18;
        }
        else{
            tx_data = 0x32;
            UCSR0B |= 0x78;
       //     lcd_print(1,1,tx_data,4);
            //_delay_ms(100);
            UCSR0B &= 0x18;
        }

/*
        if(Front_Sharp_Sensor < 30) {
            buzzer_off();
            forward();
        }
        else if(Front_Sharp_Sensor >= 30 && Right_Sharp_Sensor < 30){
            total_right_overtake();
        }
        else if(Front_Sharp_Sensor >= 30 && Right_Sharp_Sensor >= 30 && Left_Sharp_Sensor < 30){
            total_left_overtake();
        }
        else if(Front_Sharp_Sensor >= 30 && Right_Sharp_Sensor >= 30 && Left_Sharp_Sensor >= 30){
            stop();
            buzzer_on();
        }
    clear_led();
	}
	*/
}
}
